#sum of first N natural numbers
def sum(n):
    sum=0
    for i in range(1,n+1):
        sum=sum+i
    return sum

y=sum(15)
print("sum of N natural nos is",y)

#Checking whether a pythagorian triplet
def triplet(a,b,c):
    if(pow(c,2)==pow(a,2)+pow(b,2)):
        print("It is a pythagorian triplet")
    else:
        print("It is not a pythagorian triplet")
    
triplet(6,8,10)

#Conversions
#Binary to decimal
def binarytodecimal(n):
    i=0
    res=0
    while(n>0):
        r=n%10
        res=res+r*pow(2,i)
        n=n//10
        i+=1
    return res
    
y=binarytodecimal(1001)        
print(y)      

#Octal to decimal
def octaltodecimal(n):
    i=0
    res=0
    while(n>0):
        r=n%10
        res=res+r*pow(8,i)
        n=n//10
        i+=1
    return res

y=octaltodecimal(152)        
print(y)

#Hexadecimal to decimal
def Hexadecimal(n):
    i=0
    res=0
    while(n>0):
        r=n%10
        res=res+r*pow(16,i)
        n=n//10
        i+=1
    return res

y=Hexadecimal(152)        
print(y)

#Decimal to Binary
def Decimaltobinary(n):
    while(n!=0):
        print(n%2,end=" ")
        n=n//2
        

y=Decimaltobinary(152)     
print()

#Decimal to Octal

def decToOctal(n):
 
    octalNum = [0] * 100
    i = 0
    while (n != 0):
        octalNum[i] = n % 8
        n = int(n / 8)
        i += 1
    for j in range(i - 1, -1, -1):
        print(octalNum[j], end="")
 
n = 33
decToOctal(n)
print()

# Conversion table of remainders to
# hexadecimal equivalent
conversion_table = {0: '0', 1: '1', 2: '2', 3: '3', 4: '4',
					5: '5', 6: '6', 7: '7',
					8: '8', 9: '9', 10: 'A', 11: 'B', 12: 'C',
					13: 'D', 14: 'E', 15: 'F'}
					
def decimalToHexadecimal(decimal):
	hexadecimal = ''
	while(decimal > 0):
		remainder = decimal % 16
		hexadecimal = conversion_table[remainder] + hexadecimal
		decimal = decimal // 16

	return hexadecimal

decimal_number = 69
print("The hexadecimal form of", decimal_number,
	"is", decimalToHexadecimal(decimal_number))
 

